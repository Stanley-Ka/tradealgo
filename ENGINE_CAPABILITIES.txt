ENGINE CAPABILITIES (Concise)
=============================

Overview
--------
Daily US‑equities research engine: build features, calibrate specialists, train meta, backtest, alert to Discord, paper trade. Optional intraday scaffold and Streamlit UI.

Data & Features
---------------
- Build dataset: `python -m engine.data.build_dataset --provider yahoo --universe-file engine/data/universe/nasdaq100.example.txt --start 2015-01-01`
- Build features: `python -m engine.features.build_features --universe-file engine/data/universe/nasdaq100.example.txt --start 2015-01-01 --out data/datasets/features_daily_1D.parquet`

Modeling
--------
- CV + calibrate: `python -m engine.models.run_cv --features data/datasets/features_daily_1D.parquet --label label_up_1d --calibration platt --out data/datasets/oof_specialists.parquet --calibrators-out data/models/spec_calibrators.pkl`
- Train meta: `python -m engine.models.train_meta --oof data/datasets/oof_specialists.parquet --train-folds all-but-last:1 --test-folds last:1 --out data/datasets/meta_predictions.parquet --model-out data/models/meta_lr.pkl`

Backtesting
-----------
- Top‑K: `python -m engine.backtest.simple_daily --features data/datasets/features_daily_1D.parquet --pred data/datasets/meta_predictions.parquet --prob-col meta_prob --top-k 20 --cost-bps 5 --report-html data/backtests/daily_topk_report.html`

Trade Alerts (Discord)
----------------------
- One‑off: `python -m engine.tools.trade_alert --features data/datasets/features_daily_1D.parquet --model-pkl data/models/meta_lr.pkl --universe-file engine/data/universe/nasdaq100.example.txt --provider none --top-k 3 --dry-run`
- Real‑time (market hours): `python -m engine.tools.real_time_alert --features data/datasets/features_daily_1D.parquet --model-pkl data/models/meta_lr.pkl --universe-file engine/data/universe/nasdaq100.example.txt --times "09:35,15:55" --poll 15`
- Live price cascade (when `--price-source live`): Polygon last trade → Polygon snapshot → Yahoo fast_info → Yahoo quote → Polygon previous close. Works regardless of `--live-provider`. Set `alert.polygon_plan: starter` to skip last trade/snapshot. See docs/polygon_api.md.
 - Tip: Ensure `POLYGON_API_KEY` is loaded (see `scripts/load-env.ps1`). For Yahoo fallback, no key needed.
 - Optional ex-dividend blackout: build dividends via `python -m engine.tools.build_dividends_map --universe-file ... --out data/reference/dividends.csv` and pass `--dividends-csv ... --exdiv-blackout-days 1..3` to `entry_loop`.

Reference Utilities (Polygon)
-----------------------------
- Build universe: `python -m engine.tools.build_universe_polygon --out engine/data/universe/us_all.txt --types CS --exchanges NASDAQ,NYSE,ARCA`
- Build sector map: `python -m engine.tools.build_sector_map_polygon --universe-file engine/data/universe/us_all.txt --out engine/data/sector_map.csv`
- Build dividends map: `python -m engine.tools.build_dividends_map --universe-file engine/data/universe/us_all.txt --start 2020-01-01 --out engine/data/dividends.csv`

Paper Trader
------------
- Daily step: `python -m engine.tools.paper_trader --features data/datasets/features_daily_1D.parquet --pred data/datasets/meta_predictions.parquet --universe-file engine/data/universe/nasdaq100.example.txt --top-k 20 --state-dir data/paper --cost-bps 5 --turnover-cap 0.3`
- Update via script: `./scripts/update-paper-ledger.ps1 -Config engine/config.research.yaml`

UI (Streamlit)
--------------
- Run: `streamlit run ui/app.py`
- Presets and account/risk settings managed in‑app; YAML saved for reuse.

Optional LSTM Specialist
------------------------
- Train: `python -m engine.models.train_lstm_spec --features data/datasets/features_daily_1D.parquet --feature-set tech --target log_return --window 40 --hidden 64 --epochs 40 --out data/models/spec_lstm.pt`
- Enable in YAML under `specialists.lstm` and re‑run CV/meta.

Configuration
-------------
- Key sections: `specialists.*`, `risk.*`, `paths.*`, `alert.*`.
- Risk gates (e.g., `min_adv_usd`, `max_atr_pct`, `earnings_blackout`) and sizing (`account_equity`, `risk_pct`, `stop_atr_mult`).
- Example configs: `engine/config.research.yaml`, presets in `engine/presets/`.

Requirements
------------
- Core: pandas, numpy, scikit‑learn, requests, pyyaml, pyarrow, tqdm.
- Extras: streamlit, pandas_market_calendars. Optional: torch (for LSTM).

Discord Webhooks
----------------
- Use separate channels by setting env vars:
  - `DISCORD_ALERTS_WEBHOOK_URL` for stock recommendation alerts (trade_alert/real_time_alert)
  - `DISCORD_TRADES_WEBHOOK_URL` for paper trading executions (paper_trader)
  - If unset, both fall back to `DISCORD_WEBHOOK_URL`.

Common Workflows
----------------
1) Build → Features → CV → Meta → Backtest
2) Preview Trade Alert (dry‑run) → enable Discord
3) Paper trade daily or run‑to‑end; review `data/paper/`
4) Start real‑time alerts at set times (market hours)

Notes
-----
- Signals are daily; real‑time just triggers daily logic intraday.
- No broker integration in scope. News provider `finnhub` needs `FINNHUB_API_KEY`.
